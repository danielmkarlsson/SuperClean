CLASS::SuperClean
summary::An MPC, a bunch of effects, and a couple of synths.

categories::Algorithmic Composition

related::Classes/CleanAux, Classes/CleanEvent

DESCRIPTION::
This is a SuperCollider variant of strong::Clean::, Most of SuperClean can be rewritten at runtime: you can add and modify effects, synth defs, load samples incrementally, and spatialise to any number of channels. You can use SuperCollider as usual alongside of it.

note::
This system is experimental.

CLASSMETHODS::
method::new
Return a new instance, ready to be started

argument::numChannels
The number of channels of the internal link::Classes/Bus##bus:: (this is also the maximal number of output channels).

argument::server
link::Classes/Server:: to play on.


method::maxSampleNumChannels
Specifies the maximum number of channels your sound files have (default is 2: stereo samples)


method::start
Convenience method that gives defaults for many situations. It configures the server and starts SuperClean with a number of auxs. It allows you to pass a few parameters:

argument::numChannels
The number of channels of the SuperClean instance (see above).

argument::server
link::Classes/Server:: to play on.

argument::numAuxs
number of auxs to create on startup (see: link::Classes/CleanAux::). You can add or remove them later.

argument::port
The port to listen on (default is 57120)

argument::senderAddr
The address to listen to (a link::Classes/String::).

argument::path
A path that is used to load some sound files. This is a string, a path pointing to a number of files, which usually contains a wildcard (code::*::). E.g. code::"~/samples/special/*"::

argument::synthNames
A symbol or array of symbols of the SynthDef names for which to generate code.

argument::excluding
The parameter names which should be excluded. Names already defined and used internally by SuperClean will be excluded in addition to these.

INSTANCEMETHODS::

method::auxs
A list of link::Classes/CleanAux::s. Auxs are the basic elements of clean. Each aux has its own global effects and global settings. You can start any number of auxs any time. You can direct sounds into an aux by the parameter: code::aux: 7:: (this sends to aux 7, if it exists, otherwise it'll wrap to whatever is available.)

code::
// in the default startup, clean is kept in the ~clean environment variable
// you can access the aux by index:

~clean.auxs[0].set(\amp, 0.1) // reduce the amplitude of one aux

// make a mixer for the auxs, using dB scaling
(
var w, spec;
spec = \db.asSpec;
w = Window("auxical volume", Rect(240, 240, 300, 500)).front;

w.view.layout = HLayout(*~clean.auxs.collect { |x|
	var val = spec.unmap(x.get(\amp).ampdb);
	Slider().value_(val).action_({ |v| x.set(\amp, spec.map(v.value).dbamp.postln) })
});
)

::

method::loadSoundFiles
Read a number of sound file from disk and load them into the server memory. The buffer information is also kept in link::#buffers::, a dictionary. You can do this any time while running, and incrementally add more files.

	code::
	~clean.loadSoundFiles("<your sound file path>");
	::

note::
The naming scheme works as follows:

Given a path like: code::"path/to/my/basedrum/*"::.

The dictionary will contain under the key code::'basedrum':: an link::Classes/Array:: of all the link::Classes/Buffer::s from the samples found in the folder.

::

argument::paths
Specifies paths for sound files. This is a string, a path pointing to a number of files, which usually contains a wildcard (code::*::). E.g. code::"~/samples/special/*"::. For the glob syntax, see link::https://en.wikipedia.org/wiki/Glob_%28programming%29::.

	Alternatively, you can pass in an link::Classes/Array:: of full paths, e.g. code::["~/samples/drums/", "~/samples/cats/"]::.

argument::appendToExisting
If set to true, this will keep existing dictionary keys (see above) and add the new samples to any existing ones. This allows you to load different folders with the same name. Otherwise it will only keep those existing names which are not found in the new set of samples.


method::loadSoundFileFolder
	Read a single folder of sound files and add all of them under code::'name':: to the sample instruments. You can do this any time while running, and incrementally add more files.

argument::folderPath
	The path for the folder.

argument::name
	The name of the sample instrument as it will be used in tidal. Subsequent sound files can be addressed by passing the "n" parameter, e.g.

argument::appendToExisting
	See: link::#-loadSoundFiles::

	code::
	~clean.loadSoundFileFolder(Platform.resourceDir +/+ "sounds/", \rnb);

	::

method::loadSoundFile
	Read a single sound file and add it under code::'name':: to the sample instruments. You can do this any time while running, and incrementally add more files.

argument::path
The path for the file.

argument::name
The name of the sample instrument as it will be used in SuperClean

	::



method::loadOnly
Read a number of named folders. You can do this any time while running, and incrementally add more files.

argument::names
An array of symbols or strings. These are  folder names and at the same time instrument names for SuperClean.

argument::path
The path in which the folders can be found.

method::freeSoundFiles
Remove sound files and free their memory.

argument::names
An array of sample instrument names which to remove.
	code::
	~clean.postSampleInfo;
	~clean.freeSoundFiles([\rnb]);
	~clean.postSampleInfo; // now, the rnb samples should be gone.
	::

method::freeAllSoundFiles
Remove all sound files and free their memory.

method::fileExtensions
A list of valid sound file extensions, which can be extended (default: code::["wav", "aif", "aiff", "aifc"]::). In theory, all libsndfile formats should be supported link::http://www.mega-nerd.com/libsndfile/#Features::.

method::postSampleInfo
	Post a list of all existing sample names, the number of variants, the range of durations, and memory requirement.

	code::circus (3)   0.17 - 0.52 sec (171 kB)::.

	code::
	~clean.postSampleInfo
	::

method::loadSynthDefs
Load a number of files, usually containing link::Classes/SynthDef::s.

argument::path
This is a string, a path pointing as file or a to a number of files, which then contains a wildcard (code::*::). E.g. code::"~/synths/special/*"::


method::start
This method starts SuperClean. It creates a number of link::Classes/CleanAux::s (each of which has global effects, output busses, and settings). It also opens a network connection.

argument::outBusses

An (a link::Classes/Array::) of audio output channels: it determines how many link::Classes/CleanAux::s there will be.

argument::senderAddr

The address to listen to (a link::Classes/String::).


method::stop
End all audio processes and close network responder.

method::free
End all audio processes, close network responder, and free sound file resources.
