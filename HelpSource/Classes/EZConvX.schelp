title:: EZConvX
summary:: Wrapper around PartConv
categories:: UGens>Convolution
related:: Classes/PartConv

description::
This is a convenience wrapper class around link::Classes/PartConv::. Most of the functionality comes from the
example code found in the link::Classes/PartConv:: help file, although it has been modified to handle strong::multichannel buffers::.
EZConv also features a clean up function and a pseudo *ar method, which can be used inside SynthDefs. EZConv can also be used
as simply a way of handling bookkeeping/preparation of PartConv buffers, the buffers can be accessed through the teletype::irSpectrum:: instance method.

CLASSMETHODS::
method:: new
argument::path
Path to an impulse response, or any general soundfile.
argument::fftSize
Partition size for FFT used in PartConv (see link::Classes/PartConv:: for detailed info)
argument::server
Server instance to use. Uses Server.default if not supplied.

INSTANCEMETHODS::
private::path, fftSize, server
method:: ar
A pseudo *ar method to use inside SynthDefs.
argument::in
The signal to convolve.
argument::leak
Amplitude of the leak factor. A mix of all input signals is created and added to
to each convolution instance (i.e channel). It has no effect on mono input.
argument::mul
returns:: One or more instances of link::Classes/PartConv::

method:: numChannels
returns:: Number of channels in the convolution buffer.

method:: irSpectrum
returns:: One or more mono buffers, prepared to be used with link::Classes/PartConv::

method:: free
Free the buffer(s)

EXAMPLES::
code::
// first, download a nice IR to try out! (or use one of your own)
// 44.1kHz
"curl -o /tmp/r1_ortf.wav http://www.openairlib.net/sites/default/files/auralization/data/audiolab/r1-nuclear-reactor-hall/stereo/r1_ortf.wav".unixCmd;
// 48kHz
"curl -o /tmp/r1_ortf-48k.wav http://www.openairlib.net/sites/default/files/auralization/data/audiolab/r1-nuclear-reactor-hall/stereo/r1_ortf-48k.wav".unixCmd;

s.boot; // server must be booted

// ~path   = "/tmp/r1_ortf.wav";
~path   = "/tmp/r1_ortf-48k.wav";
~ezConv = EZConv(~path);

// inspect
~ezConv.numChannels;
~ezConv.irSpectrum;

(
// A simple test.
x = play {
        var o = PinkNoise.ar(0.5 ! 2) * Decay2.ar(Impulse.ar(0.5), 0.15, 0.75); // stereo source
        ~ezConv.ar(o, leak: 0.1, mul: 0.5); // watch out for gain buildup when convolving.
    }
)
x.free;

(
/*
This example uses a mono source instead. EZConv will use all available
channels from the IR and wrap around when input channels < IR channels.
The "leak factor" has no effect on mono sources.
*/
x = play {
        var o = PinkNoise.ar(0.5) * Decay2.ar(Impulse.ar(0.5), 0.15, 0.75); // mono source
        ~ezConv.ar(o, mul: 0.5);
    }
)
x.free;

(
/*
A multichannel source. EZConv will use all available channels from the
IR and wrap around when IR channels < input channels, starting (again) from the first IR channel.
*/
x = play {
        var o = PinkNoise.ar(0.5!4) * Decay2.ar(Impulse.ar(0.5), 0.15, 0.75); // multichannel source
        ~ezConv.ar(o, leak: 0.1, mul: 0.5);
    }
)
x.free;
~ezConv.free; // free the convolution buffer(s)
~ezConv = nil;
::